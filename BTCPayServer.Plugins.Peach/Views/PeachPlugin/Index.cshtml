@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Plugins.Peach.Views
@using BTCPayServer.Client
@using BTCPayServer.Plugins.Peach.Model
@using BTCPayServer.Services

@inject BTCPayServer.Plugins.Peach.Services.PeachPluginService PeachPluginService
@inject BTCPayServer.Plugins.Peach.Services.PeachService PeachService
@inject DisplayFormatter DisplayFormatter

@model BTCPayServer.Plugins.Peach.Model.PeachViewModel
@{
    ViewData.SetActivePage(PluginNavPages.Index, "Peach plugin");
    var IsConfigured = Model.Settings.isConfigured;
}


<table><tr>
        <td>
            <a href="https://peachbitcoin.com/referral/?code=PROB44" target="pch">
                <img src="/Resources/img/Peach.webp" />
            </a>
        </td>
        <td width="20" />
        <td>
            <p>
                This program allows you to exchange received Bitcoin to EUR, GBP, and many other currencies using <a href="https://peachbitcoin.com/referral/?code=PROB44" target="pch">Peach Bitcoin</a><br />
                Please read our documentation <a href="https://github.com/Nisaba/btcpayserver-plugins/blob/master/BTCPayServer.Plugins.Peach/README.md" target="_blank">here</a>.
            </p>
        </td>
    </tr></table>
<br />

<partial name="_StatusMessage" />
<div permission="@Policies.CanModifyStoreSettings">
    <br />
    <script src="/Resources/js/crypto-js.min.js"></script>
    <div class="accordion-item">
        <h2 class="accordion-header" id="additional-htmlheader-header">
            <button class="accordion-button @(IsConfigured ? "collapsed" : "")"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#peach-config"
            aria-expanded="@(IsConfigured.ToString().ToLower())"
            aria-controls="peach-config">
                <h4>Configuration</h4>
                <svg role="img" class="icon icon-caret-down">
                    <use href="/img/icon-sprite.svg?v=zHetyUWwEcS2qGEsSu8P6l-mwsFkAqFbknsYrREYYvo#caret-down"></use>
                </svg>
            </button>
        </h2>
        <div id="peach-config" class="accordion-collapse collapse @(IsConfigured ? "" : "show")" aria-labelledby="additional-htmlheader-header" style="">
            <div class="accordion-body">
                <br />
                <div class="mb-4">
                    <label class="form-label" for="encryptedFile">Import your Peach backup file</label>
                    <div class="input-group">
                        <input type="file" id="encryptedFile" accept=".json" class="form-control"
                        onchange="handleFileSelect(event)"
                        pattern="peach-account-.*\.json" />
                    </div>
                </div>

                <div class="mb-4 password-container" id="passwordContainer" style="display: none;">
                    <label class="form-label" for="decryptPassword">Enter password to decrypt file</label>
                    <div class="input-group">
                        <input type="password" class="form-control" id="decryptPassword" autocomplete="off" />
                        <button class="btn btn-primary" type="button" onclick="decryptFile()">Decrypt</button>
                    </div>
                    <i>You will also need this password to access Peach functionnalities by the plugin</i>
                </div>
            </div>
            @if (IsConfigured)
            {
                <table class="table table-sm mt-0 mx-0">
                    <tr>
                        <td width="100">
                            <label asp-for="Settings.PublicKey" class="form-label"></label>
                        </td>
                        <td width="300" class="border-0 ps-0 align-middle">
                            <input asp-for="Settings.PublicKey" data-fill="port" class="form-control readonly-input" readonly />
                        </td>
                    </tr>
                    <tr>
                        <td width="100">
                            <label asp-for="MeansOfPayments" class="form-label"></label>
                        </td>
                        <td width="300" class="border-0 ps-0 align-middle">
                            <input value="@String.Join(", ", Model.MeansOfPayments)" data-fill="port" class="form-control readonly-input" readonly />
                        </td>
                    </tr>
                </table>
            }
        </div>
    </div>
    <script type="text/javascript">
        let selectedFile = null;

        async function handleFileSelect(event) {
            const file = event.target.files[0];
            if (!file.name.match(/^peach-account-.*\.json$/)) {
                alert("File name format must be: peach-account-xxxxxxxx.json");
                return;
            }
            selectedFile = file;
            $('#passwordContainer').css('display', 'block');
            $('#decryptPassword').focus();
        }

        async function decryptFile() {
            if (!selectedFile) return;

            const password = $('#decryptPassword').val();
            if (!password) {
                alert("Please enter a password");
                return;
            }

            const reader = new FileReader();
            reader.onload = async function(e) {
                try {
                    const encryptedText = e.target.result;
                    const decryptedBytes = CryptoJS.AES.decrypt(encryptedText, password);
                    const decryptedText = decryptedBytes.toString(CryptoJS.enc.Utf8);

                    if (!decryptedText) {
                        throw new Error("Decrypt failed - incorrect password");
                    }

                    const decryptedData = JSON.parse(decryptedText);
                    let Request = {
                        settings: {
                            storeId: '@Model.Settings.StoreId',
                            publicKey: decryptedData.publicKey,
                            pwd: password,
                            privKey: decryptedData.base58,
                            isRegistered: false
                        },
                        meansOfPayments: toMoPJSon(decryptedData.paymentData)
                    };

                    const response = await fetch('Peach/UpdSettings', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(Request)
                    });
                    const result = await response.json();

                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = window.location.pathname;

                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'peachMsg';
                    input.value = result.msg;
                    form.appendChild(input);

                    const input2 = document.createElement('input');
                    input2.type = 'hidden';
                    input2.name = 'peachToken';
                    input2.value = result.token;
                    form.appendChild(input2);

                    document.body.appendChild(form);
                    form.submit();

                } catch (error) {
                    alert("Decrypt error: " + error.message);
                }
            };
            reader.readAsText(selectedFile);
        }

        function toMoPJSon(inputArray) {
            return inputArray.map(item => {
                const jsonStr = JSON.stringify(item);
                const hash = CryptoJS.SHA256(jsonStr).toString(CryptoJS.enc.Hex);
                return {
                    storeId: '@Model.Settings.StoreId',
                    moP: item.type,
                    hashPaymentData: hash
                };
            });
        }
    </script>
</div>

<div permission="@Policies.CanCreateNonApprovedPullPayments,@Policies.CanManagePayouts">
    <br />
    <h4>Operations</h4>
    <br />
    @if (!IsConfigured)
    {
        <p>
            <i>Peach settings not set for this store...</i>
        </p>
    } else
    {
        var walletConfig = await PeachPluginService.GetBalances(Model.Settings.StoreId, $"{Context.Request.Scheme}://{Context.Request.Host}");
        @if (walletConfig.OnChainEnabled)
        {
            <p><b>On Chain Balance</b>: @walletConfig.OnChainBalance BTC  ~ @DisplayFormatter.Currency(walletConfig.OnChainFiatBalance, walletConfig.FiatCurrency)</p>
        }
        else
        {
            <p>On Chain wallet not configured</p>
        }
        @if (walletConfig.OnChainBalance == 0)
        {
            <p>No bitcoins available for sale</p>
        } else {
            <script type = "text/javascript" >
                var tblOfrs = [];
                var antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                function GetPartial(reqData) {
                    $('#containerPeach').html('<div style="display: flex; justify-content: center;"><img src="/Resources/img/Loading_icon.gif"/></div>');
                    $('#btSend').hide();
                    $('#btCreate').hide();
                    $.ajax({
                        url: 'peach/GetPartialResult',
                        type: 'POST',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(reqData),
                        headers: {
                            'RequestVerificationToken': antiForgeryToken 
                        },
                        success: function(result) {
                            tblOfrs = [];
                            $('#containerPeach').html(result);
                            $('#btSend').show();
                            $('#btCreate').show();
                        },
                        error: function (xhr, status, error) {
                            $('#containerPeach').html("Error: " + error + "<br/>" + xhr.responseText);
                            $('#btSend').show();
                            $('#btCreate').show();
                        }
                    });
                }

                function setBalanceValues() {
                    const percent = parseFloat($('#percentToSend').val());
                    $('#lblToSendBTC').text(((percent *  @walletConfig.OnChainBalance) / 100).toFixed(8));
                    $('#lblToSendFiat').text(Math.round((percent *  @walletConfig.OnChainFiatBalance) / 100));
                }

                function onPeachSearch() {
                    const percent = parseFloat($('#percentToSend').val());
                    if (percent == 100) {
                        alert('You must keep some sats for the transaction fees... Please reduce the amount');
                        return;
                    }
                    const reqData = {
                        token: '@Model.PeachToken',
                        currencyCode: '@walletConfig.FiatCurrency',
                        btcAmount: $('#lblToSendBTC').text(),
                        rate: @walletConfig.Rate
                    };
                    GetPartial(reqData);
                }

                function onPeachCreate() {
                    const percent = parseFloat($('#percentToSend').val());
                    if (percent == 100) {
                        alert('You must keep some sats for the transaction fees... Please reduce the amount');
                        return;
                    }

                    $('#btCreate').hide();
                    $('#btSend').hide();
                    const reqData = {
                        token: '@Model.PeachToken',
                        amount: $('#lblToSendBTC').text(),
                        premium: parseFloat($('#premium').val()),
                        currency: '@walletConfig.FiatCurrency'
                    };

                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = window.location.pathname + '/CreateOffer';

                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'token';
                    input.value = '@Model.PeachToken';
                    form.appendChild(input);

                    const input2 = document.createElement('input');
                    input2.type = 'hidden';
                    input2.name = 'amount';
                    input2.value = parseFloat($('#lblToSendBTC').text());
                    form.appendChild(input2);

                    const input3 = document.createElement('input');
                    input3.type = 'hidden';
                    input3.name = 'premium';
                    input3.value = parseFloat($('#premium').val());
                    form.appendChild(input3);

                    const input4 = document.createElement('input');
                    input4.type = 'hidden';
                    input4.name = 'currency';
                    input4.value = '@walletConfig.FiatCurrency';
                    form.appendChild(input4);

                    document.body.appendChild(form);
                    form.submit();
                }

                async function GetToken() {
                    $('#btOK').hide();
                    $('#btSend').hide();
                    let Request = {
                        pwd: $('#pkPassword').val()
                    };

                    const response = await fetch('Peach/GetToken', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(Request)
                    });
                    const result = await response.json();

                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = window.location.pathname;

                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'peachMsg';
                    input.value = result.msg;
                    form.appendChild(input);

                    const input2 = document.createElement('input');
                    input2.type = 'hidden';
                    input2.name = 'peachToken';
                    input2.value = result.token;
                    form.appendChild(input2);

                    document.body.appendChild(form);
                    form.submit();
                }
            </script>

            <table>
                <tr>
                    <td>
                        <table>
                            <tr>
                                <td>
                                    <b>Percent to sale:</b>&nbsp;
                                    <input id="percentToSend" type="number" min="0" max="100" value="95" onchange="setBalanceValues()" />
                                </td>
                                <td width="25" />
                                <td>
                                    <label id="lblToSendBTC">@(walletConfig.OnChainBalance * (decimal)0.95)</label>&nbsp; BTC - &nbsp;
                                    <label id="lblToSendFiat">@((int)(walletConfig.OnChainFiatBalance * (decimal)0.95))</label>&nbsp; @walletConfig.FiatCurrency
                                </td>
                              <!--  <td width="25" />
                                <td rowspan="2" valign="middle">
                                    <button id="btSend" class="btn btn-primary" onclick="onPeachSearch()">Search</button>
                                  </td> -->
                            </tr>
                            <tr>
                                <td colspan="3"><b>Your means of payment: </b>@String.Join(", ", Model.MeansOfPayments)</td>
                            </tr>
                        </table>
                    </td>
                    <td width="35" />
                    @if (String.IsNullOrEmpty(Model.PeachToken))
                    {
                        <td>
                            <table>
                                <tr>
                                    <td>
                                        <b>Password</b>:<br />
                                        (to post Peach offers)
                                    </td>
                                    <td width="5" />
                                    <td valign="middle">
                                        <input type="password" class="form-control" id="pkPassword" autocomplete="off" />
                                    </td>
                                    <td width="5" />
                                    <td valign="middle">
                                        <button id="btOK" class="btn btn-primary" type="button" onclick="GetToken()">OK</button>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    } else
                    {
                        <td>
                            <table>
                                <tr>
                                    <td>
                                        <b>Your premium</b>:<br />
                                        (positive or negative)
                                    </td>
                                    <td width="5" />
                                    <td valign="middle">
                                        <input id="premium" type="number" min="-30" max="30" value="0" />
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td width="25" />
                        <td>
                            <button id="btCreate" class="btn btn-primary" onclick="onPeachCreate()">Create Sell Offer</button>
                        </td>
                    }
                </tr>
            </table>
            <br />
            <i><small>Please check that there is no previous pending payout in BTCPay before placing another order</small></i>

            @if (Model.IsPayoutCreated)
            {
                <br /><br />
                <div>
                    <strong>Success!</strong> Your payout has been created.<br />
                    If you have set an automatic payout processor, the payment will be sent automatically to Peach.<br />
                    Otherwise, <a href="/stores/@Model.Settings.StoreId/payouts?payoutState=AwaitingPayment">click here</a> to validate the payout.<br />
                    If an issue arises, please contact hello@peachbitcoin.com.
                </div>
            }

            <br/>
            <div id="containerPeach"></div>

        }
    }
</div>