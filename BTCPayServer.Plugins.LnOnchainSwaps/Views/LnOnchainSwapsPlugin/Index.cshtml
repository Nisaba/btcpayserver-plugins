@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Plugins.LnOnchainSwaps.Views
@using BTCPayServer.Client
@using BTCPayServer.Plugins.LnOnchainSwaps.Models
@using BTCPayServer.Services

@inject BTCPayServer.Plugins.LnOnchainSwaps.Services.LnOnchainSwapsPluginService LnOnchainSwapsPluginService
@inject DisplayFormatter DisplayFormatter

@model LnOnchainSwapsViewModel
@{
    ViewData.SetActivePage(PluginNavPages.Index, "Lightning/Onchain Swaps plugin");
}

<table><tr>
        <td>
            <img src="/Resources/img/LnOnchainSwaps.webp" />
        </td>
        <td width="20"></td>
        <td>
            <h2>@ViewData["Title"]</h2>
            <br />
            <p>
                Allows you to forward received funds to <a href="https://www.LnOnchainSwaps.com/" target="_blank">LnOnchainSwaps</a>, a Swiss offramp provider. Get funds in fiat (EUR, CHF or other currencies) or make a swap to the crypto you want.<br />
                Please read our documentation <a href="https://github.com/LnOnchainSwaps/btcpay-plugin/blob/master/BTCPayServer.Plugins.LnOnchainSwaps/README.md" target="_blank">here</a>.
            </p>
        </td>
    </tr></table>
<br />

<partial name="_StatusMessage" />

<div permission="@Policies.CanCreateNonApprovedPullPayments,@Policies.CanManagePayouts">
    <br />
    <h4>Operations</h4>
    <br />
    @{
        StoreWalletConfig walletConfig = await LnOnchainSwapsPluginService.GetBalances(Model.StoreId, $"{Context.Request.Scheme}://{Context.Request.Host}");
    }
    <table class="table table-sm mt-0 mx-0">
        <tr>
            <td>
                <h5>On Chain</h5>
                @if (walletConfig.OnChainEnabled)
                {
                    <p><b>Balance</b>: @walletConfig.OnChainBalance BTC  ~ @DisplayFormatter.Currency(walletConfig.OnChainFiatBalance, walletConfig.FiatCurrency)</p>
                }
                else
                {
                    <p>On Chain wallet not configured</p>
                }
                @if (walletConfig.OnChainBalance == 0)
                {
                    <p>No bitcoins available for swap</p>
                }
            </td><td width="20"></td>
            <td>
                <h5>Lightning</h5>
                @if (walletConfig.OffChainEnabled)
                {
                    <p><b>Balance</b>: @walletConfig.OffChainBalance BTC  ~ @DisplayFormatter.Currency(walletConfig.OffChainFiatBalance, walletConfig.FiatCurrency)</p>
                }
                else
                {
                    <p>Lightning not configured</p>
                }
                @if (walletConfig.OffChainBalance == 0)
                {
                    <p>No bitcoins available for swap</p>
                }
            </td>
        </tr>
    </table>
    @if (!walletConfig.OffChainAvailable && !walletConfig.OnChainAvailable)
    {
        <br /><p>This store has no configured wallet</p>
    } else
    {
        <table class="table table-sm mt-0 mx-0"><tr>
            <td><b>Swap from :</b></td>
            @if (walletConfig.OnChainAvailable)
            {
                <td width="10"></td>
                <td>
                        <input value="FromOnchain" name="chkFromSwap" type="radio" checked="checked" class="form-check-input mt-0 me-2" onchange="showRows()" />&nbsp; On Chain BTCPay Wallet
                </td>
            }
            @if (walletConfig.OffChainAvailable)
            {
                <td width="10"></td>
                <td>
                        <input value="FromLightning" name="chkFromSwap" type="radio" checked="@(!walletConfig.OnChainAvailable)" class="form-check-input mt-0 me-2" onchange="showRows()" />&nbsp; Lightning BTCPay Wallet
                </td>
            }
        </tr></table>

        <table class="table table-sm mt-0 mx-0">
            @if(walletConfig.OffChainAvailable)
            {
                <tr id="rowSwapToOnchain" style="display:@(walletConfig.OnChainAvailable ? "none" : "block")">
                    <td><b>Swap to :</b></td>
                    <td width="10"></td>
                    @if (walletConfig.OnChainAvailable)
                    {
                        <td>
                            <input id="chkToOnchainInternal" name="chkToSwapOnChain" value="" type="radio" checked="checked" class="form-check-input mt-0 me-2" />&nbsp; On Chain BTCPay Wallet
                        </td>
                        <td width="10"></td>
                    }
                    <td>
                        @Html.RadioButton("chkToSwapOnChain", "external", !walletConfig.OnChainAvailable, new { @class = "form-check-input mt-0 me-2", id = "chkToOnchainExternal" })
                    </td>
                    <td width="10"></td>
                    <td>
                        External On Chain Wallet :
                        <input id="txtToOnchainExternal" type="text" class="form-control form-control-sm" placeholder="Paste an external btc address" />
                    </td>
                </tr>
            }
            @if (walletConfig.OnChainAvailable)
            {
                <tr id="rowSwapToLightning">
                    <td><b>Swap to :</b></td>
                    <td width="10"></td>
                    @if (walletConfig.OffChainAvailable)
                    {
                        <td>
                            <input id="chkToLightningInternal" name="chkToSwapLightning" value="" type="radio" checked="checked" class="form-check-input mt-0 me-2" />&nbsp; Lightning BTCPay Wallet
                        </td>
                        <td width="10"></td>
                    }
                    <td>
                        @Html.RadioButton("chkToSwapLightning", "external", !walletConfig.OffChainAvailable, new { @class = "form-check-input mt-0 me-2", id = "chkLightningExternal" })
                    </td>
                    <td width="10"></td>
                    <td>
                        External Lightning Wallet :
                        <input id="txtLightningExternal" type="text" class="form-control form-control-sm" placeholder="Paste a Lightning invoice, offer or LNURL" onchange="setSwapValues()" />
                    </td>
                </tr>
            }
        </table>
        <br />
        <table class="table table-sm mt-0 mx-0">
            <tr>
                <td>
                    Percent to swap:&nbsp;
                    <input id="percentToSend" type="number" min="0" max="100" value="95" onchange="setSwapValues()" />
                    <br />
                </td>
                <td width="25"></td>
                <td>
                    <label id="lblToSendBTC">@(walletConfig.OnChainBalance * (decimal)0.95)</label>&nbsp; BTC - &nbsp;
                    <label id="lblToSendFiat">@((int)(walletConfig.OnChainFiatBalance * (decimal)0.95))</label>&nbsp; @walletConfig.FiatCurrency
                </td>
                <td width="25"></td>
                <td><button id="btSend" class="btn btn-primary" onclick="onSwap()">Do Swap</button></td>
            </tr>
        </table>
        <br />
            <i><small>Please check that there is no previous pending payout in BTCPay before placing a swap.<br />
            </small></i>
        <br />

        @if (Model.IsPayoutCreated)
        {
            <br />
            <div>
                <strong>Success!</strong> Your payout has been created.<br />
                If you have set an automatic payout processor, the payment will be sent automatically to Boltz.<br/>
                Otherwise, <a href="/stores/@Model.StoreId/payouts?payoutState=AwaitingPayment">click here</a> to validate the payout.<br />
                If an issue arises, please contact hello@LnOnchainSwaps.com.
            </div>
        }
   
        <script type="text/javascript">
            const OnChainBalance = @walletConfig.OnChainBalance;
            const OffChainBalance = @walletConfig.OffChainBalance;

            const lblToSendBTC = document.getElementById('lblToSendBTC');
            const lblToSendFiat = document.getElementById('lblToSendFiat');
            const percentToSend = document.getElementById('percentToSend');

            function setSwapValues() {
                const percent = parseFloat(percentToSend.value) || 0;
                const isOnChain =  $("input[name='chkFromSwap']:checked").val() === "FromOnchain";
                const fiatBalance = isOnChain ? @walletConfig.OnChainFiatBalance : @walletConfig.OffChainFiatBalance;
                const btcBalance = isOnChain ? OnChainBalance : OffChainBalance;

                lblToSendBTC.textContent = ((percent * btcBalance) / 100).toFixed(8);
                lblToSendFiat.textContent = Math.round((percent * fiatBalance) / 100);
            }

            function showRows() {
               const isOnChain =  $("input[name='chkFromSwap']:checked").val() === "FromOnchain";

                if (isOnChain) {
                    document.getElementById('rowSwapToOnchain').style.display = 'none';
                    document.getElementById('rowSwapToLightning').style.display = 'table-row';
                } else {
                    document.getElementById('rowSwapToOnchain').style.display = 'table-row';
                    document.getElementById('rowSwapToLightning').style.display = 'none';
                }
                setSwapValues();
            }

            function onSwap() {
                const percent = parseFloat(percentToSend.value) || 0;
                if (percent == 100) {
                    alert('You must keep some sats for the transaction fees... Please reduce the amount');
                    return;
                }
                $('#btSend').hide();

                const isOnChain =  $("input[name='chkFromSwap']:checked").val() === "FromOnchain";

                $('#SwapType').val(isOnChain ? '@BoltzSwap.SwapTypeOnChainToLn' : '@BoltzSwap.SwapTypeLnToOnChain');
                $('#BtcAmount').val(lblToSendBTC.textContent);
                $('#IsInternal').val(isOnChain ? $('chkToOnchainExternal').is(':checked') : $('chkLightningExternal').is(':checked'));
                $('#ExternalAddressOrInvoice').val(isOnChain ? $('#txtToOnchainExternal').val() : $('#txtLightningExternal').val());
                $('#frmSwap')[0].submit();
            }
        </script>
        <form method="post" autocomplete="off" action="LnOnchainSwaps/CreateSwap" id="frmSwap">
            @Html.AntiForgeryToken()
            <input type="hidden" name="SwapType" id="SwapType" />
            <input type="hidden" name="BtcAmount" id="BtcAmount" />
            <input type="hidden" name="IsInternal" id="IsInternal" />
            <input type="hidden" name="ExternalAddressOrInvoice" id="ExternalAddressOrInvoice" />
        </form>
    }

</div>


