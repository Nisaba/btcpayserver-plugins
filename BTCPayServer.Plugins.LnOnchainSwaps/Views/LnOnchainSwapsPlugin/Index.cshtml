@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Plugins.LnOnchainSwaps.Views
@using BTCPayServer.Client
@using BTCPayServer.Plugins.LnOnchainSwaps.Models
@using BTCPayServer.Services
@using BTCPayServer.Abstractions.Services

@inject BTCPayServer.Plugins.LnOnchainSwaps.Services.LnOnchainSwapsPluginService LnOnchainSwapsPluginService
@inject DisplayFormatter DisplayFormatter
@inject Safe Safe

@model LnOnchainSwapsViewModel
@{
    ViewData.SetActivePage(PluginNavPages.Index, "Lightning/Onchain Swaps plugin");
}

<table><tr>
        <td>
            <img src="/Resources/img/LnOnchainSwaps.webp" />
        </td>
        <td width="20"></td>
        <td>
            <h2>@ViewData["Title"]</h2>
            <br />
            <p>
                Allows you to forward received funds to <a href="https://www.LnOnchainSwaps.com/" target="_blank">LnOnchainSwaps</a>, a Swiss offramp provider. Get funds in fiat (EUR, CHF or other currencies) or make a swap to the crypto you want.<br />
                Please read our documentation <a href="https://github.com/LnOnchainSwaps/btcpay-plugin/blob/master/BTCPayServer.Plugins.LnOnchainSwaps/README.md" target="_blank">here</a>.
            </p>
        </td>
    </tr></table>
<br />

<partial name="_StatusMessage" />

<div permission="@Policies.CanCreateNonApprovedPullPayments,@Policies.CanManagePayouts">
    <br />
    <h4>Operations</h4>
    <br />
    @{
        StoreWalletConfig walletConfig = await LnOnchainSwapsPluginService.GetBalances(Model.StoreId, $"{Context.Request.Scheme}://{Context.Request.Host}");
    }
    <table class="table table-sm mt-0 mx-0">
        <tr>
            <td>
                <h5>On Chain</h5>
                @if (walletConfig.OnChainEnabled)
                {
                    <p><b>Balance</b>: @walletConfig.OnChainBalance BTC  ~ @DisplayFormatter.Currency(walletConfig.OnChainFiatBalance, walletConfig.FiatCurrency)</p>
                }
                else
                {
                    <p>On Chain wallet not configured</p>
                }
                @if (walletConfig.OnChainBalance == 0)
                {
                    <p>No bitcoins available for swap</p>
                }
            </td><td width="20"></td>
            <td>
                <h5>Lightning</h5>
                @if (walletConfig.OffChainEnabled)
                {
                    <p><b>Balance</b>: @walletConfig.OffChainBalance BTC  ~ @DisplayFormatter.Currency(walletConfig.OffChainFiatBalance, walletConfig.FiatCurrency)</p>
                }
                else
                {
                    <p>Lightning not configured</p>
                }
                @if (walletConfig.OffChainBalance == 0)
                {
                    <p>No bitcoins available for swap</p>
                }
            </td>
        </tr>
    </table>
    @if (!walletConfig.OffChainAvailable && !walletConfig.OnChainAvailable)
    {
        <br /><p>This store has no configured wallet</p>
    } else
    {
        <table class="table table-sm mt-0 mx-0"><tr>
            <td><b>Swap from :</b></td>
            @if (walletConfig.OnChainAvailable)
            {
                <td width="10"></td>
                <td>
                        <input value="FromOnchain" name="chkFromSwap" type="radio" checked="checked" class="form-check-input mt-0 me-2" onchange="showRows()" />&nbsp; On Chain BTCPay Wallet
                </td>
            }
            @if (walletConfig.OffChainAvailable)
            {
                <td width="10"></td>
                <td>
                        <input value="FromLightning" name="chkFromSwap" type="radio" checked="@(!walletConfig.OnChainAvailable)" class="form-check-input mt-0 me-2" onchange="showRows()" />&nbsp; Lightning BTCPay Wallet
                </td>
            }
        </tr>
        @if(walletConfig.OffChainAvailable)
        {
            <tr id="rowSwapToOnchain" style="display:@(walletConfig.OnChainAvailable ? "none" : "block")">
                <td><b>Swap to :</b></td>
                <td width="10"></td>
                @if (walletConfig.OnChainAvailable)
                {
                    <td>
                        <input id="chkToOnchainInternal" name="chkToSwapOnChain" value="" type="radio" checked="checked" class="form-check-input mt-0 me-2" />&nbsp; On Chain BTCPay Wallet
                    </td>
                    <td width="10"></td>
                }
               <!-- <td>
                    @Html.RadioButton("chkToSwapOnChain", "external", !walletConfig.OnChainAvailable, new { @class = "form-check-input mt-0 me-2", id = "chkToOnchainExternal" })
                    &nbsp;External On Chain Wallet :&nbsp;
                    <input id="txtToOnchainExternal" type="text" class="form-control form-control-sm" placeholder="Paste an external btc address" />
                     </td>-->
            </tr>
        }
        @if (walletConfig.OnChainAvailable)
        {
            <tr id="rowSwapToLightning">
                <td><b>Swap to :</b></td>
                <td width="10"></td>
                @if (walletConfig.OffChainAvailable)
                {
                    <td>
                        <input id="chkToLightningInternal" name="chkToSwapLightning" value="" type="radio" checked="checked" class="form-check-input mt-0 me-2" />&nbsp; Lightning BTCPay Wallet
                    </td>
                    <td width="10"></td>
                }
                <td>
                    @Html.RadioButton("chkToSwapLightning", "external", !walletConfig.OffChainAvailable, new { @class = "form-check-input mt-0 me-2", id = "chkLightningExternal" })
                    &nbsp;External Lightning Wallet : &nbsp;
                    <input id="txtLightningExternal" type="text" class="form-control form-control-sm" placeholder="Paste a Lightning invoice, offer or LNURL" onchange="setSwapValues()" />
                </td>
            </tr>
        }
        </table>
        <br />
        <table class="table table-sm mt-0 mx-0">
            <tr>
                <td>
                    Percent to swap:&nbsp;
                    <input id="percentToSend" type="number" min="0" max="100" value="95" onchange="setSwapValues()" />
                    <br />
                </td>
                <td width="25"></td>
                <td>
                    <label id="lblToSendBTC">@(walletConfig.OnChainBalance * (decimal)0.95)</label>&nbsp; BTC - &nbsp;
                    <label id="lblToSendFiat">@((int)(walletConfig.OnChainFiatBalance * (decimal)0.95))</label>&nbsp; @walletConfig.FiatCurrency
                </td>
                <td width="25"></td>
                <td><button id="btSend" class="btn btn-primary" onclick="onSwap()">Do Swap</button></td>
            </tr>
        </table>
        <br />
            <i><small>Please check that there is no previous pending payout in BTCPay before placing a swap.<br />
            </small></i>
        <br />

        @if (Model.IsPayoutCreated)
        {
            <br />
            <div>
                <strong>Success!</strong> Your payout has been created.<br />
                If you have set an automatic payout processor, the payment will be sent automatically to Boltz.<br/>
                Otherwise, <a href="/stores/@Model.StoreId/payouts?payoutState=AwaitingPayment">click here</a> to validate the payout.<br />
                If an issue arises, please contact hello@LnOnchainSwaps.com.
            </div>
        }
   
        <script type="text/javascript">
            const OnChainBalance = @walletConfig.OnChainBalance;
            const OffChainBalance = @walletConfig.OffChainBalance;

            const lblToSendBTC = document.getElementById('lblToSendBTC');
            const lblToSendFiat = document.getElementById('lblToSendFiat');
            const percentToSend = document.getElementById('percentToSend');

            function setSwapValues() {
                const percent = parseFloat(percentToSend.value) || 0;
                const isOnChain =  $("input[name='chkFromSwap']:checked").val() === "FromOnchain";
                const fiatBalance = isOnChain ? @walletConfig.OnChainFiatBalance : @walletConfig.OffChainFiatBalance;
                const btcBalance = isOnChain ? OnChainBalance : OffChainBalance;

                lblToSendBTC.textContent = ((percent * btcBalance) / 100).toFixed(8);
                lblToSendFiat.textContent = Math.round((percent * fiatBalance) / 100);
            }

            function showRows() {
               const isOnChain =  $("input[name='chkFromSwap']:checked").val() === "FromOnchain";

                if (isOnChain) {
                    document.getElementById('rowSwapToOnchain').style.display = 'none';
                    document.getElementById('rowSwapToLightning').style.display = 'table-row';
                } else {
                    document.getElementById('rowSwapToOnchain').style.display = 'table-row';
                    document.getElementById('rowSwapToLightning').style.display = 'none';
                }
                setSwapValues();
            }

            function onSwap() {
                const percent = parseFloat(percentToSend.value) || 0;
                if (percent == 100) {
                    alert('You must keep some sats for the transaction fees... Please reduce the amount');
                    return;
                }
                $('#btSend').hide();

                const isOnChain =  $("input[name='chkFromSwap']:checked").val() === "FromOnchain";

                $('#SwapType').val(isOnChain ? '@BoltzSwap.SwapTypeOnChainToLn' : '@BoltzSwap.SwapTypeLnToOnChain');
                $('#BtcAmount').val(lblToSendBTC.textContent);
                $('#IsInternal').val(isOnChain ? $('#chkToLightningInternal').is(':checked') : $('#chkToOnchainInternal').is(':checked'));
                $('#ExternalAddressOrInvoice').val(isOnChain ? $('#txtLightningExternal').val() : $('#txtToOnchainExternal').val());
                $('#frmSwap')[0].submit();
            }
        </script>
        <form method="post" autocomplete="off" action="LnOnchainSwaps/CreateSwap" id="frmSwap">
            @Html.AntiForgeryToken()
            <input type="hidden" name="SwapType" id="SwapType" />
            <input type="hidden" name="BtcAmount" id="BtcAmount" />
            <input type="hidden" name="IsInternal" id="IsInternal" />
            <input type="hidden" name="ExternalAddressOrInvoice" id="ExternalAddressOrInvoice" />
        </form>
    }

    <br /><br />
    <h4>Swaps</h4>
    <br />
    @if (Model.Swaps.Any())
    {
        var page = Context.Request.Query["page"].Count > 0 ? int.Parse(Context.Request.Query["page"]) : 1;
        var pageSize = 20;
        var totalItems = Model.Swaps.Count();
        var totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);
        var pagedTransactions = Model.Swaps
            .Skip((page - 1) * pageSize)
            .Take(pageSize)
            .ToList();
        <link rel="stylesheet" type="text/css" href="/Resources/css/pre-style.css">

        <div class="table-responsive">
            <table class="table table-hover mass-action">
                <thead mass-action-head>
                    <tr>
                        <th>Swap ID</th>
                        <th>Status</th>
                        <th>Date</th>
                        <th>Type</th>
                        <th>Original Amount</th>
                        <th>Swap Amount</th>
                        <th>Invoice</th>
                        <th>Pull Payment</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var swap in Model.Swaps)
                    {
                        var detailsId = $"swapDetails_{swap.SwapId}";
                        <tr class="mass-action-row item">
                            <td class="text-break align-middle invoiceId-col">
                                <a href="#" onclick="GetSwapStatus('@swap.SwapId');return false;" class="invoice-details-link">@swap.SwapId</a>
                            </td>
                            <td><div class="badge badge-expired" id="status-@swap.SwapId">@swap.Status</div></td>
                            <td>@swap.DateT</td>
                            <td><div class="badge badge-expired">@swap.Type</div></td>
                            <td align="right">@swap.OriginalAmount</td>
                            <td align="right">@swap.ExpectedAmount</td>
                            <td class="text-break align-middle invoiceId-col">
                                <a asp-controller="UIInvoice" asp-action="Invoice" asp-route-invoiceId="@swap.BTCPayInvoiceId" class="text-break">@swap.BTCPayInvoiceId</a>
                            </td>
                            <td class="text-break align-middle invoiceId-col">
                                <a asp-controller="UIPullPayment" asp-action="ViewPullPayment" asp-route-pullPaymentId="@swap.BTCPayPullPaymentId" class="text-break">@swap.BTCPayPullPaymentId</a>
                            </td>
                            <td class="align-middle text-end">
                                <div class="d-inline-flex align-items-center gap-2">
                                    <button class="accordion-button collapsed only-for-js ms-0 d-inline-block" type="button" data-bs-toggle="collapse" data-bs-target="#@detailsId" aria-expanded="false" aria-controls="@detailsId">
                                        <vc:icon symbol="caret-down" />
                                    </button>
                                </div>
                            </td>
                        </tr>
                        <tr id="@detailsId" class="invoice-details-row collapse">
                        <td colspan="9" class="border-top-0">
                            Initial Json:<br/>
                            <pre>@Safe.Raw(@swap.HighlightJson)</pre>
                            <br />
                            @if (string.IsNullOrEmpty(swap.RefundSignature))
                            {
                                    <button id="btRefund-@swap.SwapId" class="btn btn-primary" onclick="GetRefundSignature('@swap.SwapId')">
                                    Get Refund signature
                                </button>
                                <div id="refund-@swap.SwapId" style="display:none">
                                    <p>Refund Signature:</p>
                                    <pre id="pre-@swap.SwapId"/>
                                </div>
                            }
                            else
                            {
                                <p>Refund Signature:</p>
                                <pre>swap.RefundSignature</pre>
                            }}
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <script>
            function GetSwapStatus(swapId) {
                $.ajax({
                    url: 'LnOnchainSwaps/GetSwapStatus',
                    type: 'GET',
                    data: { swapId: swapId },
                    success: function (data) {
                        if (data) {
                            $('#status-' + swapId).text(data);
                        } else {
                            console.log('No status returned for swap ID:', swapId);
                        }
                    },
                    error: function (dataError) {
                        console.log('Error fetching swap status:', dataError);
                    }
                });
            }

            function GetRefundSignature(swapId) {
                $.ajax({
                    url: 'LnOnchainSwaps/GetRefundSignature',
                    type: 'GET',
                    data: { swapId: swapId },
                    success: function (data) {
                        if (data) {
                            $('refund-' + swapId).show();
                            $('#pre-' + swapId).text(data);
                            $('#btRefund-' + swapId).hide();
                        } else {
                            console.log('No refund signature returned for swap ID:', swapId);
                        }
                    },
                    error: function (dataError) {
                        console.log('Error fetching refund signature:', dataError);
                    }
                });
            }
        </script>
    }
    else
    {
        <p>No swaps found.</p>
    }
</div>


