@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Plugins.MtPelerin.Views
@using BTCPayServer.Client
@using BTCPayServer.Plugins.MtPelerin.Model
@using BTCPayServer.Services

@inject BTCPayServer.Plugins.MtPelerin.Services.MtPelerinPluginService MtPelerinPluginService
@inject DisplayFormatter DisplayFormatter

@model BTCPayServer.Plugins.MtPelerin.Model.MtPelerinModel
@{
    ViewData.SetActivePage(PluginNavPages.Index, "Mt Pelerin plugin");
}


<table><tr>
        <td>
            <a href="https://www.mtpelerin.com/" target="mtp">
                <img src="/Resources/img/MtPelerin.png" />
            </a>
        </td>
        <td width="20" />
        <td>
            <h2>@ViewData["Title"]</h2>
            <br />
            <p>
                Allows you to forward received funds to <a href="https://www.mtpelerin.com/" target="_blank">MtPelerin</a>, a Swiss offramp provider. Get funds in fiat (EUR, CHF or other currencies) or make a swap to the crypto you want.<br />
                Please read our documentation <a href="https://github.com/MtPelerin/btcpay-plugin/blob/master/BTCPayServer.Plugins.MtPelerin/README.md" target="_blank">here</a>.
            </p>
        </td>
    </tr></table>
<br />

<partial name="_StatusMessage" />
@{
    var isModelKO = !Model.Settings.isConfigured || !ViewData.ModelState.IsValid;
}
<div permission="@Policies.CanModifyStoreSettings">
    <br />

    <div class="accordion-item">
        <h2 class="accordion-header" id="additional-htmlheader-header">
            <button class="accordion-button @(isModelKO ? "" : "collapsed")"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#mtpelerin-config"
            aria-expanded="@(isModelKO.ToString().ToLower())"
            aria-controls="mtpelerin-config">
                <h4>Configuration</h4>
                <svg role="img" class="icon icon-caret-down">
                    <use href="/img/icon-sprite.svg?v=zHetyUWwEcS2qGEsSu8P6l-mwsFkAqFbknsYrREYYvo#caret-down"></use>
                </svg>
            </button>
        </h2>
        <div id="mtpelerin-config" class="accordion-collapse collapse @(isModelKO ? "show" : "")" aria-labelledby="additional-htmlheader-header" style="">
            <div class="accordion-body">
                <br />
                <form method="post" autocomplete="off">
                    @Html.AntiForgeryToken()
                    <input asp-for="Settings.StoreId" type="hidden" />
                    <table class="table table-sm mt-0 mx-0">
                        <tr>
                            <td width="100">
                                <label asp-for="Settings.Phone" class="form-label"></label>
                            </td>
                            <td width="300" class="border-0 ps-0 align-middle">
                                <input asp-for="Settings.Phone" data-fill="port" class="form-control" />
                                <span asp-validation-for="Settings.Phone" class="text-danger"></span>
                            </td>
                        </tr>
                        <tr>
                            <td width="100">
                                <label asp-for="Settings.UseBridgeApp" class="form-label"></label>
                            </td>
                            <td width="300" class="border-0 ps-0 align-middle">
                                <input asp-for="Settings.UseBridgeApp" class="form-check-input" type="checkbox" />
                                <span asp-validation-for="Settings.UseBridgeApp" class="text-danger"></span>
                            </td>
                        </tr>
                        <tr>
                            <td width="100">
                                <label asp-for="Settings.Lang" class="form-label"></label>
                            </td>
                            <td width="300" class="border-0 ps-0 align-middle">
                                <select asp-for="Settings.Lang" class="form-select">
                                    <option value="en">English</option>
                                    <option value="fr">Fran�ais</option>
                                    <option value="de">Deutsch</option>
                                    <option value="it">Italiano</option>
                                    <option value="es">Espa�ol</option>
                                    <option value="pt">Portugu�s</option>
                                </select>
                                <span asp-validation-for="Settings.Lang" class="text-danger"></span>
                            </td>
                        </tr>
                        <tr>
                            <td width="100%" align="center" colspan="4">
                                <br />
                                <button id="SaveButton" type="submit" class="btn btn-primary" value="save" name="Command">Save</button>
                            </td>
                        </tr>
                    </table>
                </form>
            </div>
        </div>
    </div>
</div>

<div permission="@Policies.CanCreateNonApprovedPullPayments,@Policies.CanManagePayouts">
    <br />
    <h4>Operations</h4>
    <br />
    @if (isModelKO)
    {
        <p>
            <i>Mt Pelerin settings not set for this store...</i>
        </p>
    } else
    {
        var walletConfig = await MtPelerinPluginService.GetBalances(Model.Settings.StoreId, $"{Context.Request.Scheme}://{Context.Request.Host}");
        var signingInfo = await MtPelerinPluginService.GetSigningAdressInfo(Model.Settings.StoreId); ;

        <table class="table table-sm mt-0 mx-0">
            <tr>
                <td>
                    <input id="chkOnchain" name="chkNetwork" value="" type="radio" checked="checked" class="form-check-input mt-0 me-2" onchange="setMtPelerinValues()" />
                </td><td>
                    <h5>On Chain</h5>
                    @if (walletConfig.OnChainEnabled)
                    {
                        <p><b>Balance</b>: @walletConfig.OnChainBalance BTC  ~ @DisplayFormatter.Currency(walletConfig.OnChainFiatBalance, walletConfig.FiatCurrency)</p>
                    }
                    else
                    {
                        <p>On Chain wallet not configured</p>
                    }
                    @if (walletConfig.OnChainBalance == 0)
                    {
                        <p>No bitcoins available for sale</p>
                    }
                </td><td width="20"></td>
                <td>
                    <input id="chkLightning" name="chkNetwork" type="radio" class="form-check-input mt-0 me-2" onchange="setMtPelerinValues()" />
                </td><td>
                    <h5>Lightning</h5>
                    @if (walletConfig.OffChainEnabled)
                    {
                        <p><b>Balance</b>: @walletConfig.OffChainBalance BTC  ~ @DisplayFormatter.Currency(walletConfig.OffChainFiatBalance, walletConfig.FiatCurrency)</p>
                    }
                    else
                    {
                        <p>Lightning not configured</p>
                    }
                    @if (walletConfig.OffChainBalance == 0)
                    {
                        <p>No bitcoins available for sale</p>
                    }
                </td>
            </tr>
        </table>

        <table>
            <tr>
                <td>
                    Percent to sale/swap:&nbsp;
                    <input id="percentToSend" type="number" min="0" max="100" value="95" onchange="setMtPelerinValues()" />
                    <br />
                </td>
                <td width="25" />
                <td>
                    <label id="lblToSendBTC">@(walletConfig.OnChainBalance * (decimal)0.95)</label>&nbsp; BTC - &nbsp;
                    <label id="lblToSendFiat">@((int)(walletConfig.OnChainFiatBalance * (decimal)0.95))</label>&nbsp; @walletConfig.FiatCurrency
                </td>
                <td width="25" />
                <td><button id="btSend" class="btn btn-primary" onclick="onMtPelerinAsk()">Ask to Mt Pelerin</button></td>
            </tr>
        </table>
        <br />
            <i><small>Please check that there is no previous pending Mt Pelerin payout in BTCPay before placing another order.<br />
                For a sell, Mt Pelerin requires a minimum amount for a transaction, equivalent to 50 CHF (1 CHF for a swap).
            </small></i>
        <br />

        @if (Model.IsPayoutCreated)
        {
            <br />
            <div>
                <strong>Success!</strong> Your payout has been created.<br />
                If you have set an automatic payout processor, the payment will be sent automatically to Mt Pelerin.<br/>
                Otherwise, <a href="/stores/@Model.Settings.StoreId/payouts?payoutState=AwaitingPayment">click here</a> to validate the payout.<br />
                If an issue arises, please contact hello@mtpelerin.com.
            </div>
        }

        <script type="text/javascript">
        const OnChainBalance = @walletConfig.OnChainBalance;
        const OffChainBalance = @walletConfig.OffChainBalance;

        const lblToSendBTC = document.getElementById('lblToSendBTC');
        const lblToSendFiat = document.getElementById('lblToSendFiat');
        const percentToSend = document.getElementById('percentToSend');
        const chkOnchain = document.getElementById('chkOnchain');
        const confirmMtPelerin = document.getElementById('confirmMtPelerin');
        const sendSection = document.getElementById('sendSection');
        var popupMtPelerin;

        function setMtPelerinValues() {
            const percent = parseFloat(percentToSend.value) || 0;
            const isOnChain = document.getElementById('chkOnchain').checked;
            const fiatBalance = isOnChain ? @walletConfig.OnChainFiatBalance : @walletConfig.OffChainFiatBalance;
            const btcBalance = isOnChain ? OnChainBalance : OffChainBalance;

            lblToSendBTC.textContent = ((percent * btcBalance) / 100).toFixed(8);
            lblToSendFiat.textContent = Math.round((percent * fiatBalance) / 100);
        }

        function onMtPelerinAsk() {
            const percent = parseFloat(percentToSend.value) || 0;
            if (percent == 100) {
                alert('You must keep some sats for the transaction fees... Please reduce the amount');
                return;
            }
            const isOnChain = chkOnchain.checked;
            const balance = isOnChain ? OnChainBalance : OffChainBalance;
            const amountToSend = (percent * balance) / 100;

            if (amountToSend <= 0) return;

            const sNet = isOnChain ? 'bitcoin' : 'lightning';
            const iframeUrl = new URL('https://widget.mtpelerin.com/');

            iframeUrl.searchParams.append('_ctkn', '@MtPelerinSettings.ApiKey');
            iframeUrl.searchParams.append('lang', '@Model.Settings.Lang');
            @if (Model.Settings.UseBridgeApp)
            {
                @:iframeUrl.searchParams.append('_blgn', 1);
            }
            iframeUrl.searchParams.append('phone', '@Model.Settings.PhoneInt');
            iframeUrl.searchParams.append('snet', `${sNet}_mainnet`);
            iframeUrl.searchParams.append('tabs', 'sell,swap');
            iframeUrl.searchParams.append('tab', 'sell');
            iframeUrl.searchParams.append('sdc', '@walletConfig.FiatCurrency');
            iframeUrl.searchParams.append('wdc', '@(walletConfig.FiatCurrency == "EUR" ? "EURC" : "USDT")');
            let vAmount, vCurrency
            if (isOnChain) {
                vCurrency = 'BTC';
                vAmount = amountToSend.toString();
                    if (@((signingInfo.SenderBtcAddress != "").ToString().ToLower())) {
                    iframeUrl.searchParams.append('addr', '@signingInfo.SenderBtcAddress');
                    if ('@signingInfo.Signature' !== '') {
                        iframeUrl.searchParams.append('code', '@signingInfo.Code');
                        iframeUrl.searchParams.append('hash', '@signingInfo.Signature');
                    }
                }
            } else {
                vAmount = (amountToSend * 100000000).toFixed(0);
                vCurrency = 'sat';
            }
            iframeUrl.searchParams.append('ssc', vCurrency);
            iframeUrl.searchParams.append('ssa', vAmount);
            iframeUrl.searchParams.append('wsc', vCurrency);
            iframeUrl.searchParams.append('wsa', vAmount);

            window.addEventListener('message', handleMtPelerinMessage, false);
            popupMtPelerin = window.open(iframeUrl.toString(), 'mtp', 'width=570,height=745,scrollbars=yes,resizable=yes');
        }

        function handleMtPelerinMessage(event) {
            if (event.origin !== 'https://widget.mtpelerin.com') return;
            if (event.data.type === 'orderCreated') {
                sendToMtPelerin(event.data.data);
                window.removeEventListener('message', handleMtPelerinMessage);
            }
        }

        function onConfirmChange() {
            sendSection.style.display = confirmMtPelerin.checked ? 'block' : 'none';
        }

        function sendToMtPelerin(createdOrderData) {
            const percent = parseFloat(percentToSend.value) || 0;
            const isOnChain = chkOnchain.checked;
            var amountBtc = parseFloat(createdOrderData.valueIn);

            if(!isOnChain) {
                amountBtc /= 100000000;
            }
            const MtPelerinOperation = {
                type: createdOrderData.type,
                amount: amountBtc,
                isOnChain: isOnChain,
                lnInvoice: isOnChain ? 'none' : createdOrderData.lnInvoice,
                mtPelerinId: createdOrderData.id
            };

            fetch('MtPelerin/createpayout', {
                method: 'POST',
                headers: {
                        'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(MtPelerinOperation)
            })
            .then(response => {
                if (response.ok) {
                    throw new Error('Network response was not ok');
                } else {
                    if (isOnChain)
                        popupMtPelerin.close();
                }
                window.location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                window.location.reload();
            })
            .finally(() => {
            });
        }
        </script>
    }
</div>
